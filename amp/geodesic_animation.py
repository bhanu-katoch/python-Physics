# -*- coding: utf-8 -*-
"""coupled_differential.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BEcJHldydqsj_GpK8lfdRgTKMkg28AOc
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import pandas as pd

"""First Differential Equation:

$$\large\frac{d^2u}{d\lambda^2} - \cos(u)\sin(u)\frac{dv}{d\lambda}\frac{dv}{d\lambda} = 0$$

2nd Differential Equation:

$$\large\frac{d^2v}{d\lambda^2} + 2\cot(u)\frac{du}{d\lambda}\frac{dv}{d\lambda} = 0$$

Define 
* $v_1 = \dot{x_1}$
* $v_2 = \dot{x_2}$


These make up two differential equations. Then noting that $\dot{v_1} = \ddot{x_1}$ and $\dot{v_2} = \ddot{x_2}$ we get

* $\dot{v_1} = \cos(x_1)\sin(x_1)v_2v_2$
* $\dot{v_2} = -2\cot(x_1)v_1v_2$

Then

$$\vec{S} = \begin{bmatrix} x_1\\ v_1 \\  x_2 \\ v_2 \end{bmatrix} \hspace{10mm} \implies \hspace{10mm} \frac{d\vec{S}}{dt} = \begin{bmatrix} \dot{x_1}\\ \dot{v_1} \\ \dot{x_2} \\ \dot{v_2}\end{bmatrix} =  \begin{bmatrix} v_1\\ \cos(x_1)\sin(x_1)v_2v_2\\ v_2 \\ -2\cot(x_1)v_1v_2 \end{bmatrix}$$
"""

def dSdt(t,S):
    x1, v1, x2, v2 = S
    return [v1,
            np.cos(x1)*np.sin(x1)*v2**2,
            v2,
            -2*v1*v2/np.tan(x1)]
x1_0 = np.pi/2
v1_0 = 0.1
x2_0 = np.pi/2
v2_0 = 0.1
S_0 = (x1_0, v1_0, x2_0, v2_0)

t1 = np.linspace(0, 20, 100)
sol = odeint(dSdt, y0=S_0, t=t1, tfirst=True)

#sol.T

df = pd.DataFrame({'θ': sol.T[0], 'θ`': sol.T[1], 'φ': sol.T[2], 'φ`': sol.T[3]})
df.iloc[[10]]
print(df)

#plt.plot(sol.T[0],sol.T[1])

# importing mplot3d toolkits, numpy and matplotlib
from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()

# syntax for 3-D projection
ax = plt.axes(projection ='3d')

θ=sol.T[0]
φ=sol.T[2]

# defining all 3 axes

z = np.cos(θ)
x = np.cos(φ)*np.sin(θ)
y = np.sin(φ)*np.sin(θ)

# plotting
ax.plot3D(x, y, z, 'green')

ax.set_title('3D line plot geeks for geeks')
#plt.show()

#3-D animation

from matplotlib import pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import animation

fig = plt.figure()
ax = fig.add_subplot(projection='3d')

"""
def gen(n):
    phi = 0
    while phi < 2*np.pi:
        yield np.array([x,y,z])
        phi += 2*np.pi/n
"""

def update(num, data, line):
    line.set_data(data[:2, :num])
    line.set_3d_properties(data[2, :num])

N = 100
data = np.array([x,y,z])
line, = ax.plot(data[0, 0:1], data[1, 0:1], data[2, 0:1])



# Setting the axes properties

ax.set_xlim3d([-0.7, 0.0])
ax.set_xlabel('X')

ax.set_ylim3d([-1.0, 1.0])
ax.set_ylabel('Y')

ax.set_zlim3d([-0.7, 0.0])
ax.set_zlabel('Z')

ani = animation.FuncAnimation(fig, update, N, fargs=(data, line), interval=10000/N, blit=False)
#ani.save('matplot003.gif', writer='imagemagick')
plt.show()



